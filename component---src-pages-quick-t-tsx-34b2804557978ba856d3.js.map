{"version":3,"sources":["webpack:///./src/pages/quick-t.tsx","webpack:///./src/templates/style.ts"],"names":["Flex","styled","div","Button","button","QuickTheoryPage","useState","displayImage","setDisplayImage","data","useStaticQuery","fixed","file","childImageSharp","alt","onClick","old","Wrapper","ButtonNext","motion","ButtonReset"],"mappings":"4FAAA,qGAOMA,EAAOC,IAAOC,IAAV,oEAAGD,CAAH,yHAUJE,EAASF,IAAOG,OAAV,sEAAGH,CAAH,uPAgFGI,UA1Dc,WAAM,MACOC,oBAAS,GAA1CC,EAD0B,KACZC,EADY,KAE3BC,EAAOC,YAAe,cAY5B,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAACV,EAAD,KACE,6BACE,+DACCO,EACC,kBAAC,IAAD,CACEI,MAAOF,EAAKG,KAAKC,gBAAgBF,MACjCG,IAAI,uBAGN,oCACE,sIAIA,6BACA,6BACA,6oBAiBR,kBAACX,EAAD,CAAQY,QAAS,kBAAMP,GAAgB,SAAAQ,GAAG,OAAKA,OAC7C,2BAAIT,EAAe,cAAgB,sB,kCC1F7C,kIAGaU,EAAUhB,IAAOC,IAAV,iEAAGD,CAAH,mGAQPiB,EAAajB,YAAOkB,IAAOf,QAAjB,oEAAGH,CAAH,iRA4BVmB,EAAcnB,YAAOkB,IAAOf,QAAjB,qEAAGH,CAAH","file":"component---src-pages-quick-t-tsx-34b2804557978ba856d3.js","sourcesContent":["import React, { useState } from \"react\"\r\nimport { Wrapper } from \"../templates/style\"\r\nimport styled from \"styled-components\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport Img from \"gatsby-image\"\r\nimport { Layout } from \"../compontents/Layout\"\r\n\r\nconst Flex = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 70%;\r\n  height: 100%;\r\n  margin-bottom: 300px;\r\n  text-align: center;\r\n`\r\n\r\nconst Button = styled.button`\r\n  max-width: 125px;\r\n  max-height: 75px;\r\n\r\n  min-width: 80px;\r\n  width: 10vw;\r\n  min-height: 50px;\r\n  height: 7vw;\r\n\r\n  background: #ffffff;\r\n  box-shadow: 4px 4px 4px rgba(0, 0, 0, 0.25);\r\n  border-radius: 42px;\r\n  outline: none;\r\n  border: none;\r\n  position: absolute;\r\n  bottom: 40px;\r\n\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`\r\n\r\nconst QuickTheoryPage: any = () => {\r\n  const [displayImage, setDisplayImage] = useState(false)\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      file(relativePath: { eq: \"images/quick-sort.PNG\" }) {\r\n        childImageSharp {\r\n          fixed {\r\n            ...GatsbyImageSharpFixed\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  return (\r\n    <Layout>\r\n      <Wrapper>\r\n        <Flex>\r\n          <div>\r\n            <h1>Quick sort (Sortowanie szybkie)</h1>\r\n            {displayImage ? (\r\n              <Img\r\n                fixed={data.file.childImageSharp.fixed}\r\n                alt=\"Sortowanie szybkie\"\r\n              />\r\n            ) : (\r\n              <>\r\n                <span>\r\n                  Algorytm sortowania szybkiego jest wydajny: jego średnia\r\n                  złożoność obliczeniowa jest rzędu O(nlogn).\r\n                </span>\r\n                <br />\r\n                <br />\r\n                <span>\r\n                  Algorytm wykorzystuje technikę \"dziel i zwyciężaj\". Według\r\n                  ustalonego schematu wybierany jest jeden element w sortowanej\r\n                  tablicy, który będziemy nazywać pivot. Pivot może być\r\n                  elementem środkowym, pierwszym, ostatnim, losowym lub wybranym\r\n                  według jakiegoś innego schematu dostosowanego do zbioru\r\n                  danych. Następnie ustawiamy elementy nie większe na lewo tej\r\n                  wartości, natomiast nie mniejsze na prawo. W ten sposób\r\n                  powstaną nam dwie części tablicy (niekoniecznie równe), gdzie\r\n                  w pierwszej części znajdują się elementy nie większe od\r\n                  drugiej. Następnie każdą z tych podtablic sortujemy osobno\r\n                  według tego samego schematu.\r\n                </span>\r\n              </>\r\n            )}\r\n          </div>\r\n        </Flex>\r\n        <Button onClick={() => setDisplayImage(old => !old)}>\r\n          <b>{displayImage ? \"Pokaż treść\" : \"Pokaż zdjęcie\"}</b>\r\n        </Button>\r\n      </Wrapper>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default QuickTheoryPage\r\n","import { motion } from \"framer-motion\"\r\nimport styled from \"styled-components\"\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  height: 100%;\r\n`\r\n\r\nexport const ButtonNext = styled(motion.button)`\r\n  max-width: 125px;\r\n  max-height: 75px;\r\n\r\n  min-width: 80px;\r\n  width: 10vw;\r\n  min-height: 50px;\r\n  height: 7vw;\r\n  \r\n\r\n  svg {\r\n    width: 70%;\r\n    height: 70%;\r\n  }\r\n\r\n  background: #ffffff;\r\n  box-shadow: 4px 4px 4px rgba(0, 0, 0, 0.25);\r\n  border-radius: 42px;\r\n  outline: none;\r\n  border: none;\r\n  position: absolute;\r\n  bottom: 20px;\r\n\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`\r\n\r\nexport const ButtonReset = styled(motion.button)`\r\n  position: absolute;\r\n  top: 30px;\r\n  right: 30px;\r\n  @media only screen and (max-width: 980px) {\r\n    top: 20px;\r\n    right:20px;\r\n  }\r\n\r\n\r\n  max-width: 75px;\r\n  max-height: 75px;\r\n\r\n  min-width: 50px;\r\n  width: 10vw;\r\n  min-height: 50px;\r\n  height: 10vw;\r\n\r\n  svg {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n\r\n  background: #ffffff;\r\n  box-shadow: 4px 4px 4px rgba(0, 0, 0, 0.25);\r\n  border-radius: 42px;\r\n  outline: none;\r\n  border: none;\r\n  position: absolute;\r\n  bottom: 20px;\r\n\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`\r\n"],"sourceRoot":""}