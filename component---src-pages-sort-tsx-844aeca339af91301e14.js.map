{"version":3,"sources":["webpack:///./src/templates/bubble.tsx","webpack:///./src/templates/bubble-theory.tsx","webpack:///./src/templates/quick.tsx","webpack:///./src/templates/insertion.tsx","webpack:///./src/templates/insertion-theory.tsx","webpack:///./src/templates/quick-theory.tsx","webpack:///./src/templates/selection-theory.tsx","webpack:///./src/templates/selection.tsx","webpack:///./src/templates/about.tsx","webpack:///./src/pages/sort.tsx"],"names":["TextHolder","styled","div","BoxHolder","theme","breakpoints","fontSizes","BubbleSort","useState","step","setStep","loop","setLoop","compareIndex","setCompareIndex","initToSortArr","Array","from","length","Math","floor","random","reduce","a","b","index","id","value","toSortArr","setToSortArr","data","useStaticQuery","onClick","svg","width","height","viewBox","fill","xmlns","whileHover","rotate","transition","ease","duration","d","allBubbleJson","nodes","text","Object","values","map","Box","isActive","isDisabled","key","old","TOTAL","x","Flex","Button","button","BubbleTheory","displayImage","setDisplayImage","fixed","file","childImageSharp","alt","Separator","props","isSmaller","fontSize","generateArr","num","initIndex","initPivot","QuickSort","isEnd","setIsEnd","divide","setDivide","pivotIter","setPivotIter","animationRef","React","useRef","pivot","setPivot","numArr","setNumArr","initArr","middle","sortArr","indexOfArr","smaller","larger","cpyOfArrToRead","slice","tempPivot","push","handleIsActive","useEffect","current","anime","targets","translateY","el","window","innerHeight","getBoundingClientRect","y","translateX","sortedArr","it","sort","innerHTML","currentX","innerWidth","findIndex","Number","direction","easing","reverse","allQuickJson","row","rowIndex","col","colIndex","className","forEach","play","InsertionSort","lastIndex","setLastIndex","keys","allInsertionJson","bg","undefined","InsertionTheory","QuickTheory","SelectionTheory","SelectionSort","max","setMax","allSelectionJson","About","App","Layout","basepath","path","default"],"mappings":"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","file":"component---src-pages-sort-tsx-844aeca339af91301e14.js","sourcesContent":["import { graphql, StaticQuery, useStaticQuery } from \"gatsby\"\r\nimport { redirectTo, Redirect } from \"@reach/router\"\r\nimport React, {\r\n  createRef,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n  forwardRef,\r\n} from \"react\"\r\nimport { Layout } from \"../compontents/Layout\"\r\nimport styled from \"styled-components\"\r\nimport { rem, theme } from \"../theme\"\r\nimport anime from \"animejs\"\r\nimport { motion } from \"framer-motion\"\r\nimport { Box } from \"../compontents/Box\"\r\nimport FlipMove from \"react-flip-move\"\r\nimport { Wrapper, ButtonNext, ButtonReset } from \"./style\"\r\n\r\nconst TextHolder = styled.div`\r\n  margin-top: 40px;\r\n  max-width: 600px;\r\n  height: 140px;\r\n`\r\n\r\nconst BoxHolder = styled.div`\r\n  margin-top: 60px;\r\n\r\n  > div {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n\r\n    @media only screen and (max-width: ${theme.breakpoints[2]}px) {\r\n      margin-top: 0;\r\n      h2 {\r\n        font-size: ${theme.fontSizes[0]}rem !important;\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\ntype SortValue = {\r\n  id: number\r\n  value: number\r\n}\r\n\r\nconst BubbleSort: React.FC<{ path: string }> = () => {\r\n  const [step, setStep] = useState<number>(0)\r\n  const [loop, setLoop] = useState<number>(0)\r\n  const [compareIndex, setCompareIndex] = useState(0)\r\n\r\n  const TOTAL = 5\r\n  const numArr = Array.from({ length: TOTAL }, () =>\r\n    Math.floor(Math.random() * 40)\r\n  )\r\n  const initToSortArr = numArr.reduce<{ [key: number]: SortValue }>(\r\n    (a, b, index) => ((a[index] = { id: index, value: b }), a),\r\n    {}\r\n  )\r\n\r\n  const [toSortArr, setToSortArr] = useState<{\r\n    [key: number]: SortValue\r\n  }>(initToSortArr)\r\n\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      allBubbleJson {\r\n        nodes {\r\n          step\r\n          text\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  const handleBubbleAlgorithmNextStep = () => {\r\n    if (step === 5) {\r\n      setStep(2)\r\n      return\r\n    }\r\n\r\n    if (step < 3) {\r\n      setStep(old => old + 1)\r\n      return\r\n    }\r\n\r\n    // Swap handle\r\n    if (toSortArr[compareIndex].value >= toSortArr[compareIndex + 1].value) {\r\n      setStep(4)\r\n      setToSortArr(old => {\r\n        return {\r\n          ...old,\r\n          [compareIndex]: old[compareIndex + 1],\r\n          [compareIndex + 1]: old[compareIndex],\r\n        }\r\n      })\r\n    }\r\n\r\n    // End of loop\r\n    if (loop >= TOTAL - 2) {\r\n      setLoop(old => old + 2)\r\n      setStep(6)\r\n      return\r\n    }\r\n\r\n    setCompareIndex(old => old + 1)\r\n\r\n    // Start from beginning (-1)\r\n    if (compareIndex === TOTAL - 2 - loop) {\r\n      setStep(5)\r\n      setLoop(old => old + 1)\r\n      setCompareIndex(0)\r\n    }\r\n  }\r\n\r\n  const handleReset = () => {\r\n    setStep(0)\r\n    setLoop(0)\r\n    setCompareIndex(0)\r\n    setToSortArr(initToSortArr)\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ButtonReset onClick={handleReset}>\r\n        <motion.svg\r\n          width=\"70\"\r\n          height=\"70\"\r\n          viewBox=\"0 0 20 20\"\r\n          fill=\"none\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          whileHover={{ rotate: 360 }}\r\n          transition={{ ease: \"easeOut\", duration: 0.6 }}\r\n        >\r\n          <path\r\n            fill=\"black\"\r\n            d=\"M3.254,6.572c0.008,0.072,0.048,0.123,0.082,0.187c0.036,0.07,0.06,0.137,0.12,0.187C3.47,6.957,3.47,6.978,3.484,6.988c0.048,0.034,0.108,0.018,0.162,0.035c0.057,0.019,0.1,0.066,0.164,0.066c0.004,0,0.01,0,0.015,0l2.934-0.074c0.317-0.007,0.568-0.271,0.56-0.589C7.311,6.113,7.055,5.865,6.744,5.865c-0.005,0-0.01,0-0.015,0L5.074,5.907c2.146-2.118,5.604-2.634,7.971-1.007c2.775,1.912,3.48,5.726,1.57,8.501c-1.912,2.781-5.729,3.486-8.507,1.572c-0.259-0.18-0.618-0.119-0.799,0.146c-0.18,0.262-0.114,0.621,0.148,0.801c1.254,0.863,2.687,1.279,4.106,1.279c2.313,0,4.591-1.1,6.001-3.146c2.268-3.297,1.432-7.829-1.867-10.101c-2.781-1.913-6.816-1.36-9.351,1.058L4.309,3.567C4.303,3.252,4.036,3.069,3.72,3.007C3.402,3.015,3.151,3.279,3.16,3.597l0.075,2.932C3.234,6.547,3.251,6.556,3.254,6.572z\"\r\n          ></path>\r\n        </motion.svg>\r\n      </ButtonReset>\r\n      <TextHolder>\r\n        <h2>\r\n          {data.allBubbleJson.nodes[step].text}{\" \"}\r\n          <span>{step === 2 && loop}</span>\r\n        </h2>\r\n      </TextHolder>\r\n      <BoxHolder>\r\n        <FlipMove>\r\n          {Object.values(toSortArr).map(({ id, value }, index) => (\r\n            <Box\r\n              isActive={compareIndex === index || compareIndex + 1 === index}\r\n              isDisabled={loop >= TOTAL - index}\r\n              key={id}\r\n            >\r\n              {value}\r\n            </Box>\r\n          ))}\r\n        </FlipMove>\r\n      </BoxHolder>\r\n      <ButtonNext onClick={handleBubbleAlgorithmNextStep}>\r\n        <motion.svg\r\n          width=\"70\"\r\n          height=\"28\"\r\n          viewBox=\"0 0 81 30\"\r\n          fill=\"none\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          whileHover={{ x: 50 }}\r\n          transition={{ ease: \"easeOut\", duration: 0.6 }}\r\n        >\r\n          <path\r\n            d=\"M80.4142 16.4142C81.1953 15.6332 81.1953 14.3668 80.4142 13.5858L67.6863 0.857872C66.9052 0.0768236 65.6389 0.0768234 64.8579 0.857872C64.0768 1.63892 64.0768 2.90525 64.8579 3.6863L76.1716 15L64.8579 26.3137C64.0768 27.0948 64.0768 28.3611 64.8579 29.1421C65.6389 29.9232 66.9052 29.9232 67.6863 29.1421L80.4142 16.4142ZM-2.39029e-07 17L79 17L79 13L2.39029e-07 13L-2.39029e-07 17Z\"\r\n            fill=\"black\"\r\n          />\r\n        </motion.svg>\r\n      </ButtonNext>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default BubbleSort\r\n","import { graphql, useStaticQuery } from \"gatsby\"\r\nimport React, { useState } from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { Wrapper } from \"./style\"\r\nimport Img from \"gatsby-image\"\r\n\r\nconst Flex = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 70%;\r\n  height: 100%;\r\n  margin-bottom: 300px;\r\n  text-align: center;\r\n`\r\n\r\nconst Button = styled.button`\r\n  max-width: 125px;\r\n  max-height: 75px;\r\n\r\n  min-width: 80px;\r\n  width: 10vw;\r\n  min-height: 50px;\r\n  height: 7vw;\r\n\r\n  background: #ffffff;\r\n  box-shadow: 4px 4px 4px rgba(0, 0, 0, 0.25);\r\n  border-radius: 42px;\r\n  outline: none;\r\n  border: none;\r\n  position: absolute;\r\n  bottom: 40px;\r\n\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`\r\n\r\nconst BubbleTheory: any = () => {\r\n  const [displayImage, setDisplayImage] = useState(false)\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      file(relativePath: { eq: \"images/bubble-sort.PNG\" }) {\r\n        childImageSharp {\r\n          fixed {\r\n            ...GatsbyImageSharpFixed\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex>\r\n        <div>\r\n          <h1>Bubble sort (Sortowanie bąbelkowe)</h1>\r\n          {displayImage ? (\r\n            <Img\r\n              fixed={data.file.childImageSharp.fixed}\r\n              alt=\"Sortowanie bąbelkowe\"\r\n            />\r\n          ) : (\r\n            <>\r\n              <span>\r\n                Sortowanie bąbelkowe jest o złożoności czasowej O(n^2) i\r\n                pamięciowej O(1).\r\n              </span>\r\n              <br />\r\n              <br />\r\n              <span>\r\n                Polega na porównywaniu dwóch sąsiednich elementów i zamianie ich\r\n                kolejności, jeżeli następny element tablicy jest większy od\r\n                aktualnego. Sortowanie kończy się, gdy podczas kolejnego\r\n                przejścia nie dokonano żadnej zmiany.\r\n              </span>\r\n            </>\r\n          )}\r\n        </div>\r\n      </Flex>\r\n      <Button onClick={() => setDisplayImage(old => !old)}>\r\n        <b>{displayImage ? \"Pokaż treść\" : \"Pokaż zdjęcie\"}</b>\r\n      </Button>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default BubbleTheory\r\n","import { graphql, useStaticQuery } from \"gatsby\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { theme } from \"../theme\"\r\nimport anime from \"animejs\"\r\nimport { motion } from \"framer-motion\"\r\nimport { Box } from \"../compontents/Box\"\r\nimport FlipMove from \"react-flip-move\"\r\nimport { Wrapper, ButtonNext, ButtonReset } from \"./style\"\r\n\r\nconst TextHolder = styled.div`\r\n  margin-top: 40px;\r\n  max-width: 600px;\r\n`\r\n\r\nconst Separator = styled.div`\r\n  width: 65px;\r\n  height: 65px;\r\n  margin-right: 5px;\r\n`\r\n\r\nconst BoxHolder = styled.div<{ isSmaller: boolean }>`\r\n  margin-top: 0px;\r\n  display: inline-flex;\r\n\r\n  > div {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n\r\n    .box {\r\n      ${props => {\r\n        if (props.isSmaller) {\r\n          return {\r\n            width: \"15px\",\r\n            height: \"15px\",\r\n            fontSize: theme.fontSizes[6] + \"rem\",\r\n          }\r\n        }\r\n      }}\r\n    }\r\n\r\n    @media only screen and (max-width: ${theme.breakpoints[2]}px) {\r\n      margin-top: 0;\r\n      h2 {\r\n        font-size: ${theme.fontSizes[0]}rem !important;\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\ntype SortValue = {\r\n  id: number\r\n  value: number\r\n}\r\n\r\nconst TOTAL = 5\r\n\r\nconst generateArr = (num: number) => {\r\n  var initIndex = 0\r\n  return Array.from({ length: TOTAL }, () => {\r\n    return {\r\n      id: initIndex++,\r\n      value: Math.floor(Math.random() * 40),\r\n    }\r\n  })\r\n}\r\n\r\nconst initPivot = [[Math.floor(TOTAL)], [], [], [], []]\r\n\r\nconst QuickSort: React.FC<{ path: string }> = () => {\r\n  const [isEnd, setIsEnd] = useState(false)\r\n  const [divide, setDivide] = useState(0)\r\n  const [step, setStep] = useState(0)\r\n  const [pivotIter, setPivotIter] = useState(1)\r\n  const animationRef = React.useRef(null)\r\n  const [pivot, setPivot] = useState<number[][]>(initPivot)\r\n  const [numArr, setNumArr] = useState<SortValue[]>(generateArr(TOTAL))\r\n\r\n  const initArr = [\r\n    // First step, before `divide and conquer` logic\r\n    [numArr],\r\n    // At this moment, there are maxmum 2 possibilites.\r\n    // Previous array will be divided into 1 or 2 pieces\r\n    // depends on extremes of pivot (left, right or in-betweeen)\r\n    [[], []],\r\n    [[], [], [], [], [], [], [], []],\r\n    // Maximum probability for size of 8*2 numbers\r\n    [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],\r\n    [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],\r\n  ]\r\n\r\n  const [toSortArr, setToSortArr] = useState<any[][][]>(initArr)\r\n\r\n  const middle = Math.floor(numArr.length / 2)\r\n\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      allQuickJson {\r\n        nodes {\r\n          step\r\n          text\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  const handleQuickAlgorithmNextStep = () => {\r\n    if (isEnd) {\r\n      animationRef.current.play()\r\n      return\r\n    }\r\n\r\n    // swap last with middle-one\r\n    if (step === 0) {\r\n      setToSortArr(old => {\r\n        ;[old[0][0][middle], old[0][0][numArr.length - 1]] = [\r\n          old[0][0][numArr.length - 1],\r\n          old[0][0][middle],\r\n        ]\r\n\r\n        return old\r\n      })\r\n\r\n      setPivot(old => {\r\n        old[0][0] = toSortArr[0][0][middle].id\r\n        return old\r\n      })\r\n\r\n      setStep(1)\r\n      return\r\n    }\r\n\r\n    if (step === 1) {\r\n      let smaller: SortValue[] = []\r\n      let larger: SortValue[] = []\r\n      let tempPivot = middle\r\n\r\n      const cpyOfArrToRead = toSortArr[0][0].slice(0)\r\n\r\n      for (let index = 0; index < numArr.length; index++) {\r\n        if (index === tempPivot) continue\r\n\r\n        if (cpyOfArrToRead[index].value <= cpyOfArrToRead[tempPivot].value) {\r\n          smaller.push(cpyOfArrToRead[index])\r\n        } else {\r\n          larger.push(cpyOfArrToRead[index])\r\n        }\r\n      }\r\n\r\n      // divide and conquer\r\n      setToSortArr(old => {\r\n        old[0][0] = [...smaller, cpyOfArrToRead[tempPivot], ...larger]\r\n        old[1][0] = [...smaller]\r\n        old[1][1] = [...larger]\r\n        return old\r\n      })\r\n\r\n      setDivide(old => old + 1)\r\n      setStep(2)\r\n      return\r\n    }\r\n\r\n    if (step > 1) {\r\n      if (step % 2 === 0) {\r\n        toSortArr[divide].forEach((it, index) => {\r\n          if (it.length > 0) {\r\n            setPivot(old => {\r\n              old[divide][index] = it[it.length - 1].id\r\n              return [...old]\r\n            })\r\n            setPivotIter(old => old + 1)\r\n          }\r\n        })\r\n        setStep(3)\r\n        return\r\n      } else {\r\n        toSortArr[divide].forEach((it, index) => {\r\n          if (it.length > 0) {\r\n            sortArr(index)\r\n          }\r\n        })\r\n\r\n        setDivide(old => old + 1)\r\n      }\r\n      setStep(4)\r\n      return\r\n    }\r\n\r\n    // Indexing\r\n    // setStep(old => old + 1)\r\n  }\r\n\r\n  const sortArr = (indexOfArr: number) => {\r\n    let smaller: SortValue[] = []\r\n    let larger: SortValue[] = []\r\n\r\n    const cpyOfArrToRead = toSortArr[divide][indexOfArr].slice(0)\r\n    const tempPivot = cpyOfArrToRead.length - 1\r\n\r\n    for (let index = 0; index < cpyOfArrToRead.length; index++) {\r\n      if (index === tempPivot) continue\r\n\r\n      if (cpyOfArrToRead[index].value <= cpyOfArrToRead[tempPivot].value) {\r\n        smaller.push(cpyOfArrToRead[index])\r\n      } else {\r\n        larger.push(cpyOfArrToRead[index])\r\n      }\r\n    }\r\n\r\n    // divide and conquer\r\n    setToSortArr(old => {\r\n      old[divide][indexOfArr] = [\r\n        ...smaller,\r\n        cpyOfArrToRead[tempPivot],\r\n        ...larger,\r\n      ]\r\n      old[divide + 1][indexOfArr + indexOfArr] = [...smaller]\r\n      old[divide + 1][indexOfArr + indexOfArr + 1] = [...larger]\r\n      return old\r\n    })\r\n  }\r\n\r\n  const handleIsActive = (index: number, pivot: number) => {\r\n    if (step === 0) {\r\n      return index === TOTAL - 1\r\n    }\r\n\r\n    if (step >= 1) {\r\n      return index === pivot\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  // End handler\r\n  useEffect(() => {\r\n    if (pivotIter === TOTAL && !isEnd) {\r\n      setIsEnd(true)\r\n      setStep(5)\r\n\r\n      animationRef.current = anime({\r\n        targets: \".pivot\",\r\n        translateY: function (el) {\r\n          const OFFSET = 260\r\n          const toBottomHeight =\r\n            window.innerHeight - OFFSET - el.getBoundingClientRect().y\r\n\r\n          return toBottomHeight\r\n        },\r\n        translateX: function (el) {\r\n          const sortedArr = numArr.map(it => it.value).sort((a, b) => a - b)\r\n          const value: string = el.innerHTML\r\n          const currentX = el.getBoundingClientRect().x\r\n          const middleBottom = window.innerWidth / 2 - currentX\r\n\r\n          return (\r\n            middleBottom -\r\n            200 +\r\n            sortedArr.findIndex(it => it === Number(value)) * 120\r\n          )\r\n        },\r\n        loop: false,\r\n        direction: \"alternate\",\r\n        easing: \"easeInOutSine\",\r\n      })\r\n    }\r\n  }, [pivotIter])\r\n\r\n  const handleReset = () => {\r\n    setIsEnd(false)\r\n    setDivide(0)\r\n    setStep(0)\r\n    setPivotIter(1)\r\n    setPivot(initPivot)\r\n    setToSortArr(initArr)\r\n    setNumArr(generateArr(TOTAL))\r\n    animationRef?.current && animationRef.current.reverse()\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ButtonReset onClick={handleReset}>\r\n        <motion.svg\r\n          width=\"70\"\r\n          height=\"70\"\r\n          viewBox=\"0 0 20 20\"\r\n          fill=\"none\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          whileHover={{ rotate: 360 }}\r\n          transition={{ ease: \"easeOut\", duration: 0.6 }}\r\n        >\r\n          <path\r\n            fill=\"black\"\r\n            d=\"M3.254,6.572c0.008,0.072,0.048,0.123,0.082,0.187c0.036,0.07,0.06,0.137,0.12,0.187C3.47,6.957,3.47,6.978,3.484,6.988c0.048,0.034,0.108,0.018,0.162,0.035c0.057,0.019,0.1,0.066,0.164,0.066c0.004,0,0.01,0,0.015,0l2.934-0.074c0.317-0.007,0.568-0.271,0.56-0.589C7.311,6.113,7.055,5.865,6.744,5.865c-0.005,0-0.01,0-0.015,0L5.074,5.907c2.146-2.118,5.604-2.634,7.971-1.007c2.775,1.912,3.48,5.726,1.57,8.501c-1.912,2.781-5.729,3.486-8.507,1.572c-0.259-0.18-0.618-0.119-0.799,0.146c-0.18,0.262-0.114,0.621,0.148,0.801c1.254,0.863,2.687,1.279,4.106,1.279c2.313,0,4.591-1.1,6.001-3.146c2.268-3.297,1.432-7.829-1.867-10.101c-2.781-1.913-6.816-1.36-9.351,1.058L4.309,3.567C4.303,3.252,4.036,3.069,3.72,3.007C3.402,3.015,3.151,3.279,3.16,3.597l0.075,2.932C3.234,6.547,3.251,6.556,3.254,6.572z\"\r\n          ></path>\r\n        </motion.svg>\r\n      </ButtonReset>\r\n      <TextHolder>\r\n        <h2> {data.allQuickJson.nodes[step].text} </h2>\r\n      </TextHolder>\r\n\r\n      {toSortArr.map((row, rowIndex) => (\r\n        <BoxHolder key={rowIndex} isSmaller={divide > rowIndex || isEnd}>\r\n          {row.map((col, colIndex) => (\r\n            <FlipMove key={colIndex}>\r\n              {col.map(({ id, value }, index) => (\r\n                <Box\r\n                  key={id}\r\n                  id={rowIndex + \"-\" + colIndex + \"-\" + index}\r\n                  className={\r\n                    handleIsActive(id, pivot?.[rowIndex]?.[colIndex]) && \"pivot\"\r\n                  }\r\n                  isActive={handleIsActive(id, pivot?.[rowIndex]?.[colIndex])}\r\n                >\r\n                  {value}\r\n                </Box>\r\n              ))}\r\n              {col.length > 0 && <Separator />}\r\n            </FlipMove>\r\n          ))}\r\n        </BoxHolder>\r\n      ))}\r\n\r\n      <ButtonNext onClick={handleQuickAlgorithmNextStep}>\r\n        <motion.svg\r\n          width=\"70\"\r\n          height=\"28\"\r\n          viewBox=\"0 0 81 30\"\r\n          fill=\"none\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          whileHover={{ x: 50 }}\r\n          transition={{ ease: \"easeOut\", duration: 0.6 }}\r\n        >\r\n          <path\r\n            d=\"M80.4142 16.4142C81.1953 15.6332 81.1953 14.3668 80.4142 13.5858L67.6863 0.857872C66.9052 0.0768236 65.6389 0.0768234 64.8579 0.857872C64.0768 1.63892 64.0768 2.90525 64.8579 3.6863L76.1716 15L64.8579 26.3137C64.0768 27.0948 64.0768 28.3611 64.8579 29.1421C65.6389 29.9232 66.9052 29.9232 67.6863 29.1421L80.4142 16.4142ZM-2.39029e-07 17L79 17L79 13L2.39029e-07 13L-2.39029e-07 17Z\"\r\n            fill=\"black\"\r\n          />\r\n        </motion.svg>\r\n      </ButtonNext>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default QuickSort\r\n","import { motion } from \"framer-motion\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport FlipMove from \"react-flip-move\"\r\nimport styled from \"styled-components\"\r\nimport { Box } from \"../compontents/Box\"\r\nimport { theme } from \"../theme\"\r\nimport { ButtonNext, ButtonReset, Wrapper } from \"./style\"\r\n\r\nconst TextHolder = styled.div`\r\n  margin-top: 40px;\r\n  max-width: 600px;\r\n  height: 140px;\r\n`\r\n\r\nconst BoxHolder = styled.div`\r\n  margin-top: 60px;\r\n\r\n  > div {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n\r\n    @media only screen and (max-width: ${theme.breakpoints[2]}px) {\r\n      margin-top: 0;\r\n      h2 {\r\n        font-size: ${theme.fontSizes[0]}rem !important;\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\ntype SortValue = {\r\n  id: number\r\n  value: number\r\n}\r\n\r\nconst InsertionSort: any = () => {\r\n  const [step, setStep] = useState<number>(0)\r\n  const [compareIndex, setCompareIndex] = useState(0)\r\n  const [isEnd, setIsEnd] = useState(false)\r\n  const [lastIndex, setLastIndex] = useState(0)\r\n\r\n  const TOTAL = 5\r\n  const numArr = Array.from({ length: TOTAL }, () =>\r\n    Math.floor(Math.random() * 40)\r\n  )\r\n  const initToSortArr = numArr.reduce<{ [key: number]: SortValue }>(\r\n    (a, b, index) => ((a[index] = { id: index, value: b }), a),\r\n    {}\r\n  )\r\n\r\n  const [toSortArr, setToSortArr] = useState<{\r\n    [key: number]: SortValue\r\n  }>(initToSortArr)\r\n\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      allInsertionJson {\r\n        nodes {\r\n          step\r\n          text\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  const handleInsertionAlgorithmNextStep = () => {\r\n    if (isEnd) return\r\n    if (step < 2) {\r\n      setStep(old => old + 1)\r\n      return\r\n    }\r\n\r\n    // Swap handle\r\n    if (toSortArr[compareIndex].value > toSortArr[compareIndex + 1].value) {\r\n      // Swap\r\n      setToSortArr(old => {\r\n        return {\r\n          ...old,\r\n          [compareIndex]: old[compareIndex + 1],\r\n          [compareIndex + 1]: old[compareIndex],\r\n        }\r\n      })\r\n\r\n      setCompareIndex(old => {\r\n        if (old > 0) return old - 1\r\n        return old\r\n      })\r\n\r\n      setStep(3)\r\n    } else {\r\n      setLastIndex(old => {\r\n        setCompareIndex(old + 1)\r\n        return old + 1\r\n      })\r\n\r\n      setStep(4)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (lastIndex === Object.keys(toSortArr).length - 1) {\r\n      setIsEnd(true)\r\n      setStep(5)\r\n    }\r\n  }, [lastIndex])\r\n\r\n  const handleReset = () => {\r\n    setStep(0)\r\n    setIsEnd(0)\r\n    setCompareIndex(0)\r\n    setLastIndex(0)\r\n    setToSortArr(initToSortArr)\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ButtonReset onClick={handleReset}>\r\n        <motion.svg\r\n          width=\"70\"\r\n          height=\"70\"\r\n          viewBox=\"0 0 20 20\"\r\n          fill=\"none\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          whileHover={{ rotate: 360 }}\r\n          transition={{ ease: \"easeOut\", duration: 0.6 }}\r\n        >\r\n          <path\r\n            fill=\"black\"\r\n            d=\"M3.254,6.572c0.008,0.072,0.048,0.123,0.082,0.187c0.036,0.07,0.06,0.137,0.12,0.187C3.47,6.957,3.47,6.978,3.484,6.988c0.048,0.034,0.108,0.018,0.162,0.035c0.057,0.019,0.1,0.066,0.164,0.066c0.004,0,0.01,0,0.015,0l2.934-0.074c0.317-0.007,0.568-0.271,0.56-0.589C7.311,6.113,7.055,5.865,6.744,5.865c-0.005,0-0.01,0-0.015,0L5.074,5.907c2.146-2.118,5.604-2.634,7.971-1.007c2.775,1.912,3.48,5.726,1.57,8.501c-1.912,2.781-5.729,3.486-8.507,1.572c-0.259-0.18-0.618-0.119-0.799,0.146c-0.18,0.262-0.114,0.621,0.148,0.801c1.254,0.863,2.687,1.279,4.106,1.279c2.313,0,4.591-1.1,6.001-3.146c2.268-3.297,1.432-7.829-1.867-10.101c-2.781-1.913-6.816-1.36-9.351,1.058L4.309,3.567C4.303,3.252,4.036,3.069,3.72,3.007C3.402,3.015,3.151,3.279,3.16,3.597l0.075,2.932C3.234,6.547,3.251,6.556,3.254,6.572z\"\r\n          ></path>\r\n        </motion.svg>\r\n      </ButtonReset>\r\n      <TextHolder>\r\n        <h2>{data.allInsertionJson.nodes[step].text}</h2>\r\n      </TextHolder>\r\n      <BoxHolder>\r\n        <FlipMove>\r\n          {Object.values(toSortArr).map(({ id, value }, index) => (\r\n            <Box\r\n              bg={lastIndex >= index ? \"#1abc9c\" : undefined}\r\n              isActive={\r\n                (compareIndex === index || compareIndex + 1 === index) && !isEnd\r\n              }\r\n              key={id}\r\n            >\r\n              {value}\r\n            </Box>\r\n          ))}\r\n        </FlipMove>\r\n      </BoxHolder>\r\n      <ButtonNext onClick={handleInsertionAlgorithmNextStep}>\r\n        <motion.svg\r\n          width=\"70\"\r\n          height=\"28\"\r\n          viewBox=\"0 0 81 30\"\r\n          fill=\"none\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          whileHover={{ x: 50 }}\r\n          transition={{ ease: \"easeOut\", duration: 0.6 }}\r\n        >\r\n          <path\r\n            d=\"M80.4142 16.4142C81.1953 15.6332 81.1953 14.3668 80.4142 13.5858L67.6863 0.857872C66.9052 0.0768236 65.6389 0.0768234 64.8579 0.857872C64.0768 1.63892 64.0768 2.90525 64.8579 3.6863L76.1716 15L64.8579 26.3137C64.0768 27.0948 64.0768 28.3611 64.8579 29.1421C65.6389 29.9232 66.9052 29.9232 67.6863 29.1421L80.4142 16.4142ZM-2.39029e-07 17L79 17L79 13L2.39029e-07 13L-2.39029e-07 17Z\"\r\n            fill=\"black\"\r\n          />\r\n        </motion.svg>\r\n      </ButtonNext>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default InsertionSort\r\n","import React, { useState } from \"react\"\r\nimport { Wrapper } from \"./style\"\r\nimport styled from \"styled-components\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport Img from \"gatsby-image\"\r\n\r\nconst Flex = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 70%;\r\n  height: 100%;\r\n  margin-bottom: 300px;\r\n  text-align: center;\r\n`\r\n\r\nconst Button = styled.button`\r\n  max-width: 125px;\r\n  max-height: 75px;\r\n\r\n  min-width: 80px;\r\n  width: 10vw;\r\n  min-height: 50px;\r\n  height: 7vw;\r\n\r\n  background: #ffffff;\r\n  box-shadow: 4px 4px 4px rgba(0, 0, 0, 0.25);\r\n  border-radius: 42px;\r\n  outline: none;\r\n  border: none;\r\n  position: absolute;\r\n  bottom: 40px;\r\n\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`\r\n\r\nconst InsertionTheory: any = () => {\r\n  const [displayImage, setDisplayImage] = useState(false)\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      file(relativePath: { eq: \"images/insertion-sort.PNG\" }) {\r\n        childImageSharp {\r\n          fixed {\r\n            ...GatsbyImageSharpFixed\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n  return (\r\n    <Wrapper>\r\n      <Flex>\r\n        <div>\r\n          <h1>Insertion sort (Sortowanie przez wstawianie)</h1>\r\n          {displayImage ? (\r\n            <Img\r\n              fixed={data.file.childImageSharp.fixed}\r\n              alt=\"Sortowanie przez wstawianie\"\r\n            />\r\n          ) : (\r\n            <>\r\n              <span>\r\n                Sortowanie przez wstawianie jest efektywne dla niewielkiej\r\n                liczby elementów, jego złożoność wynosi O(n^2).\r\n              </span>\r\n              <br />\r\n              <span>\r\n                Zasada działania odzwierciedla sposób w jaki ludzie ustawiają\r\n                karty – kolejne elementy wejściowe są ustawiane na odpowiednie\r\n                miejsca docelowe.\r\n              </span>{\" \"}\r\n              <br />\r\n              <span>\r\n                Schemat działania algorytmu:\r\n                <ol>\r\n                  <li>\r\n                    Utwórz zbiór elementów posortowanych i przenieś do niego\r\n                    dowolny element ze zbioru nieposortowanego.\r\n                  </li>\r\n                  <li>Weź dowolny element ze zbioru nieposortowanego.</li>\r\n                  <li>\r\n                    Wyciągnięty element porównuj z kolejnymi elementami zbioru\r\n                    posortowanego, póki nie napotkasz elementu równego lub\r\n                    elementu większego (jeśli chcemy otrzymać ciąg niemalejący)\r\n                    lub nie znajdziemy się na początku/końcu zbioru\r\n                    uporządkowanego.\r\n                  </li>\r\n                  <li>\r\n                    Wyciągnięty element wstaw w miejsce, gdzie skończyłeś\r\n                    porównywać.\r\n                  </li>\r\n                  <li>\r\n                    Jeśli zbiór elementów nieuporządkowanych jest niepusty, wróć\r\n                    do punktu 2.\r\n                  </li>\r\n                </ol>\r\n              </span>\r\n            </>\r\n          )}\r\n        </div>\r\n      </Flex>\r\n      <Button onClick={() => setDisplayImage(old => !old)}>\r\n        <b>{displayImage ? \"Pokaż treść\" : \"Pokaż zdjęcie\"}</b>\r\n      </Button>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default InsertionTheory\r\n","import React, { useState } from \"react\"\r\nimport { Wrapper } from \"./style\"\r\nimport styled from \"styled-components\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport Img from \"gatsby-image\"\r\n\r\nconst Flex = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 70%;\r\n  height: 100%;\r\n  margin-bottom: 300px;\r\n  text-align: center;\r\n`\r\n\r\nconst Button = styled.button`\r\n  max-width: 125px;\r\n  max-height: 75px;\r\n\r\n  min-width: 80px;\r\n  width: 10vw;\r\n  min-height: 50px;\r\n  height: 7vw;\r\n\r\n  background: #ffffff;\r\n  box-shadow: 4px 4px 4px rgba(0, 0, 0, 0.25);\r\n  border-radius: 42px;\r\n  outline: none;\r\n  border: none;\r\n  position: absolute;\r\n  bottom: 40px;\r\n\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`\r\n\r\nconst QuickTheory: any = () => {\r\n  const [displayImage, setDisplayImage] = useState(false)\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      file(relativePath: { eq: \"images/quick-sort.PNG\" }) {\r\n        childImageSharp {\r\n          fixed {\r\n            ...GatsbyImageSharpFixed\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex>\r\n        <div>\r\n          <h1>Quick sort (Sortowanie szybkie)</h1>\r\n          {displayImage ? (\r\n            <Img\r\n              fixed={data.file.childImageSharp.fixed}\r\n              alt=\"Sortowanie szybkie\"\r\n            />\r\n          ) : (\r\n            <>\r\n              <span>\r\n                Algorytm sortowania szybkiego jest wydajny: jego średnia\r\n                złożoność obliczeniowa jest rzędu O(nlogn).\r\n              </span>\r\n              <br />\r\n              <br />\r\n              <span>\r\n                Algorytm wykorzystuje technikę \"dziel i zwyciężaj\". Według\r\n                ustalonego schematu wybierany jest jeden element w sortowanej\r\n                tablicy, który będziemy nazywać pivot. Pivot może być elementem\r\n                środkowym, pierwszym, ostatnim, losowym lub wybranym według\r\n                jakiegoś innego schematu dostosowanego do zbioru danych.\r\n                Następnie ustawiamy elementy nie większe na lewo tej wartości,\r\n                natomiast nie mniejsze na prawo. W ten sposób powstaną nam dwie\r\n                części tablicy (niekoniecznie równe), gdzie w pierwszej części\r\n                znajdują się elementy nie większe od drugiej. Następnie każdą z\r\n                tych podtablic sortujemy osobno według tego samego schematu.\r\n              </span>\r\n            </>\r\n          )}\r\n        </div>\r\n      </Flex>\r\n      <Button onClick={() => setDisplayImage(old => !old)}>\r\n        <b>{displayImage ? \"Pokaż treść\" : \"Pokaż zdjęcie\"}</b>\r\n      </Button>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default QuickTheory\r\n","import React, { useState } from \"react\"\r\nimport { Wrapper } from \"./style\"\r\nimport styled from \"styled-components\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport Img from \"gatsby-image\"\r\n\r\nconst Flex = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 70%;\r\n  height: 100%;\r\n  margin-bottom: 300px;\r\n  text-align: center;\r\n`\r\n\r\nconst Button = styled.button`\r\n  max-width: 125px;\r\n  max-height: 75px;\r\n\r\n  min-width: 80px;\r\n  width: 10vw;\r\n  min-height: 50px;\r\n  height: 7vw;\r\n\r\n  background: #ffffff;\r\n  box-shadow: 4px 4px 4px rgba(0, 0, 0, 0.25);\r\n  border-radius: 42px;\r\n  outline: none;\r\n  border: none;\r\n  position: absolute;\r\n  bottom: 40px;\r\n\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`\r\n\r\nconst SelectionTheory: any = () => {\r\n  const [displayImage, setDisplayImage] = useState(false)\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      file(relativePath: { eq: \"images/selection-sort.PNG\" }) {\r\n        childImageSharp {\r\n          fixed {\r\n            ...GatsbyImageSharpFixed\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n  return (\r\n    <Wrapper>\r\n      <Flex>\r\n        <div>\r\n          <h1>Selection Sort (Sortowanie przez wybieranie)</h1>\r\n          {displayImage ? (\r\n            <Img\r\n              fixed={data.file.childImageSharp.fixed}\r\n              alt=\"Sortowanie przez wybór\"\r\n            />\r\n          ) : (\r\n            <>\r\n              {\" \"}\r\n              <span>\r\n                Sortowanie przez wybieranie jest jedną z prostszych metod\r\n                sortowania o złożoności O(n^2).\r\n              </span>\r\n              <br />\r\n              <br />\r\n              <span>\r\n                Algorytm rozpoczynamy, chcąc umieścić element minimalny całej\r\n                tablicy, na samym jej początku. Przechodzimy więc przez całą\r\n                tablicę, szukając go. Gdy już go odnajdziemy, zamieniamy go\r\n                miejscami z elementem znajdującym się na zerowej pozycji. Wiemy\r\n                już, że najmniejszy z elementów w naszym zbiorze, znajduje się\r\n                na początku, więc zerowym miejscem w tablicy nie musimy się już\r\n                przejmować. Następny krok poszukiwania elementu minimalnego,\r\n                zaczniemy więc nie od zerowej, a od pierwszej pozycji w tablicy,\r\n                gdzie umieścimy kolejny minimalny element z rozpatrywanego\r\n                podzbioru. Algorytm wykonujemy do momentu, gdy w kolejnej\r\n                iteracji zaczynamy poszukiwanie minimalnego elementu na\r\n                ostatniej pozycji tablicy. Otrzymujemy w ten sposób posortowany\r\n                rosnąco zbiór.\r\n              </span>\r\n            </>\r\n          )}\r\n        </div>\r\n      </Flex>\r\n      <Button onClick={() => setDisplayImage(old => !old)}>\r\n        <b>{displayImage ? \"Pokaż treść\" : \"Pokaż zdjęcie\"}</b>\r\n      </Button>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default SelectionTheory\r\n","import { motion } from \"framer-motion\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport FlipMove from \"react-flip-move\"\r\nimport styled from \"styled-components\"\r\nimport { Box } from \"../compontents/Box\"\r\nimport { theme } from \"../theme\"\r\nimport { ButtonNext, ButtonReset, Wrapper } from \"./style\"\r\n\r\nconst TextHolder = styled.div`\r\n  margin-top: 40px;\r\n  max-width: 600px;\r\n  height: 140px;\r\n`\r\n\r\nconst BoxHolder = styled.div`\r\n  margin-top: 60px;\r\n\r\n  > div {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n\r\n    @media only screen and (max-width: ${theme.breakpoints[2]}px) {\r\n      margin-top: 0;\r\n      h2 {\r\n        font-size: ${theme.fontSizes[0]}rem !important;\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\ntype SortValue = {\r\n  id: number\r\n  value: number\r\n}\r\n\r\nconst SelectionSort: any = () => {\r\n  const [step, setStep] = useState<number>(0)\r\n  const [compareIndex, setCompareIndex] = useState(0)\r\n  const [max, setMax] = useState(0)\r\n  const [isEnd, setIsEnd] = useState(false)\r\n\r\n  const TOTAL = 5\r\n  const numArr = Array.from({ length: TOTAL }, () =>\r\n    Math.floor(Math.random() * 40)\r\n  )\r\n  const initToSortArr = numArr.reduce<{ [key: number]: SortValue }>(\r\n    (a, b, index) => ((a[index] = { id: index, value: b }), a),\r\n    {}\r\n  )\r\n\r\n  const [toSortArr, setToSortArr] = useState<{\r\n    [key: number]: SortValue\r\n  }>(initToSortArr)\r\n  const [lastIndex, setLastIndex] = useState(\r\n    Object.values(toSortArr).length - 1\r\n  )\r\n\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      allSelectionJson {\r\n        nodes {\r\n          step\r\n          text\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  const handleSelectionAlgorithmNextStep = () => {\r\n    if (isEnd) return\r\n    if (step < 4) {\r\n      setStep(old => old + 1)\r\n      return\r\n    }\r\n\r\n    if (toSortArr[compareIndex].value > toSortArr[max].value) {\r\n      setStep(6)\r\n      setMax(compareIndex)\r\n    } else {\r\n      setStep(5)\r\n    }\r\n\r\n    setCompareIndex(old => old + 1)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (compareIndex === lastIndex + 1) {\r\n      setStep(7)\r\n\r\n      // Swap\r\n      setToSortArr(old => {\r\n        return {\r\n          ...old,\r\n          [lastIndex]: old[max],\r\n          [max]: old[lastIndex],\r\n        }\r\n      })\r\n\r\n      // Go back to init\r\n      setCompareIndex(0)\r\n      setMax(0)\r\n      setLastIndex(old => old - 1)\r\n      return\r\n    } else {\r\n      // setStep(8)\r\n    }\r\n  }, [compareIndex])\r\n\r\n  useEffect(() => {\r\n    if (lastIndex === 0) {\r\n      setStep(9)\r\n      setIsEnd(true)\r\n    }\r\n  }, [lastIndex])\r\n\r\n  const handleReset = () => {\r\n    setStep(0)\r\n    setIsEnd(false)\r\n    setMax(0)\r\n    setCompareIndex(0)\r\n    setToSortArr(initToSortArr)\r\n    setLastIndex(Object.values(toSortArr).length - 1)\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ButtonReset onClick={handleReset}>\r\n        <motion.svg\r\n          width=\"70\"\r\n          height=\"70\"\r\n          viewBox=\"0 0 20 20\"\r\n          fill=\"none\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          whileHover={{ rotate: 360 }}\r\n          transition={{ ease: \"easeOut\", duration: 0.6 }}\r\n        >\r\n          <path\r\n            fill=\"black\"\r\n            d=\"M3.254,6.572c0.008,0.072,0.048,0.123,0.082,0.187c0.036,0.07,0.06,0.137,0.12,0.187C3.47,6.957,3.47,6.978,3.484,6.988c0.048,0.034,0.108,0.018,0.162,0.035c0.057,0.019,0.1,0.066,0.164,0.066c0.004,0,0.01,0,0.015,0l2.934-0.074c0.317-0.007,0.568-0.271,0.56-0.589C7.311,6.113,7.055,5.865,6.744,5.865c-0.005,0-0.01,0-0.015,0L5.074,5.907c2.146-2.118,5.604-2.634,7.971-1.007c2.775,1.912,3.48,5.726,1.57,8.501c-1.912,2.781-5.729,3.486-8.507,1.572c-0.259-0.18-0.618-0.119-0.799,0.146c-0.18,0.262-0.114,0.621,0.148,0.801c1.254,0.863,2.687,1.279,4.106,1.279c2.313,0,4.591-1.1,6.001-3.146c2.268-3.297,1.432-7.829-1.867-10.101c-2.781-1.913-6.816-1.36-9.351,1.058L4.309,3.567C4.303,3.252,4.036,3.069,3.72,3.007C3.402,3.015,3.151,3.279,3.16,3.597l0.075,2.932C3.234,6.547,3.251,6.556,3.254,6.572z\"\r\n          ></path>\r\n        </motion.svg>\r\n      </ButtonReset>\r\n      <TextHolder>\r\n        {step === 3 && (\r\n          <h2>\r\n            {data.allSelectionJson.nodes[step].text} {compareIndex}\r\n          </h2>\r\n        )}\r\n\r\n        {step !== 3 && <h2>{data.allSelectionJson.nodes[step].text}</h2>}\r\n      </TextHolder>\r\n      <BoxHolder>\r\n        <FlipMove>\r\n          {Object.values(toSortArr).map(({ id, value }, index) => (\r\n            <Box\r\n              bg={max === index ? \"#1abc9c\" : undefined}\r\n              isActive={compareIndex === index && !isEnd}\r\n              isDisabled={lastIndex < index || isEnd}\r\n              key={id}\r\n            >\r\n              {value}\r\n            </Box>\r\n          ))}\r\n        </FlipMove>\r\n      </BoxHolder>\r\n      <ButtonNext onClick={handleSelectionAlgorithmNextStep}>\r\n        <motion.svg\r\n          width=\"70\"\r\n          height=\"28\"\r\n          viewBox=\"0 0 81 30\"\r\n          fill=\"none\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          whileHover={{ x: 50 }}\r\n          transition={{ ease: \"easeOut\", duration: 0.6 }}\r\n        >\r\n          <path\r\n            d=\"M80.4142 16.4142C81.1953 15.6332 81.1953 14.3668 80.4142 13.5858L67.6863 0.857872C66.9052 0.0768236 65.6389 0.0768234 64.8579 0.857872C64.0768 1.63892 64.0768 2.90525 64.8579 3.6863L76.1716 15L64.8579 26.3137C64.0768 27.0948 64.0768 28.3611 64.8579 29.1421C65.6389 29.9232 66.9052 29.9232 67.6863 29.1421L80.4142 16.4142ZM-2.39029e-07 17L79 17L79 13L2.39029e-07 13L-2.39029e-07 17Z\"\r\n            fill=\"black\"\r\n          />\r\n        </motion.svg>\r\n      </ButtonNext>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default SelectionSort\r\n","import { motion } from \"framer-motion\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport FlipMove from \"react-flip-move\"\r\nimport styled from \"styled-components\"\r\nimport { Box } from \"../compontents/Box\"\r\nimport { theme } from \"../theme\"\r\nimport { ButtonNext, Wrapper } from \"./style\"\r\n\r\nconst Flex = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 60%;\r\n  height: 100%;\r\n  margin-bottom: 300px;\r\n  text-align: center;\r\n`\r\n\r\nconst About: any = () => {\r\n  return (\r\n    <Wrapper>\r\n      <Flex>\r\n        <div>\r\n          <h1>SortIt</h1>\r\n          <br />\r\n          <br />\r\n          <span>\r\n            Projekt został stworzony, żeby przedstawić aspekt wizualny\r\n            algorytmów sortowania.\r\n          </span>\r\n          <br />\r\n          <br />\r\n          <span>\r\n            Przedstawione tu zostało sortowanie bąbelkowe, szybkie, sortowanie\r\n            przez wstawianie i wybieranie.\r\n          </span>\r\n        </div>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default About\r\n","import React from \"react\"\r\nimport { Router } from \"@reach/router\"\r\nimport { Layout } from \"../compontents/Layout\"\r\nimport BubbleSort from \"../templates/bubble\"\r\nimport QuickPage from \"../templates/quick\"\r\nimport { Link } from \"gatsby\"\r\nimport { render } from \"react-dom\"\r\nimport BubbleTheory from \"../templates/bubble-theory\"\r\nimport QuickSort from \"../templates/quick\"\r\nimport InsertionSort from \"../templates/insertion\"\r\nimport InsertionTheory from \"../templates/insertion-theory\"\r\nimport QuickTheory from \"../templates/quick-theory\"\r\nimport SelectionTheory from \"../templates/selection-theory\"\r\nimport SelectionSort from \"../templates/selection\"\r\nimport About from \"../templates/about\"\r\n\r\nconst App = () => {\r\n  return (\r\n    <Layout>\r\n      <Router basepath=\"/sort\">\r\n        <BubbleTheory path=\"/bubble/theory\" default />\r\n        <BubbleSort path=\"/bubble/visualization\" />\r\n        <QuickTheory path=\"/quick/theory\" />\r\n        <QuickSort path=\"/quick/visualization\" />\r\n        <InsertionTheory path=\"/insertion/theory\" />\r\n        <InsertionSort path=\"/insertion/visualization\" />\r\n        <SelectionTheory path=\"/selection/theory\" />\r\n        <SelectionSort path=\"/selection/visualization\" />\r\n        <About path=\"/about\" />\r\n      </Router>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default App\r\n"],"sourceRoot":""}